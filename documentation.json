{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-eacb8334f3a1947fe2c2e5a803ffe7b0",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\r\n\r\nimport * as auth from './reducers/auth.reducers';\r\n\r\nimport * as podcast from './reducers/podcast.reducers';\r\n\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  podcastState: podcast.State;\r\n}\r\n\r\nexport const reducers = {\r\n  auth: auth.reducer,\r\n  podcast: podcast.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "podcastState",
                    "type": "podcast.State",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-3d7f5205b0d441315e538c39aa4e035c",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/user';\r\nimport { AuthActionTypes, All } from '../actions/auth.actions';\r\n\r\n\r\nexport interface State {\r\n  // is a user authenticated?\r\n  isAuthenticated: boolean;\r\n  // if authenticated, there should be a user object\r\n  user: User | null;\r\n  // error message\r\n  errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload,\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: action.payload.error\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload,\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: action.payload.error\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-b2696cf253cda138c66257dd82bf4760-1",
            "file": "src/app/store/reducers/podcast.reducers.ts",
            "type": "interface",
            "sourceCode": "import { Podcast } from '../../models/podcast';\r\nimport { PodcastActionTypes, All } from '../actions/podcast.actions';\r\n\r\n\r\nexport interface State {\r\n  // if authenticated, there should be a user object\r\n  podcast: Podcast | null;\r\n  podcasts: Podcast[] | null;\r\n  // error message\r\n  successMessage: string | null;\r\n  errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n    podcast: null,\r\n    podcasts: [],\r\n    successMessage: null,\r\n    errorMessage: null\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    \r\n    case PodcastActionTypes.LOAD_SUCCESS: {\r\n      console.log(action.payload);\r\n        return {\r\n          ...state,\r\n          podcasts: action.payload,\r\n        };\r\n      }\r\n    case PodcastActionTypes.LOAD_FAILURE: {\r\n    return {\r\n        ...state,\r\n        errorMessage: 'Not able to get podcast detail.',\r\n    };\r\n    }\r\n    case PodcastActionTypes.LOADBYID_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          podcast: action.payload,\r\n        };\r\n      }\r\n    case PodcastActionTypes.LOADBYID_FAILURE: {\r\n    return {\r\n        ...state,\r\n        errorMessage: 'Not able to get podcast detail.',\r\n    };\r\n    }\r\n    case PodcastActionTypes.ADD_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        podcast: action.payload,\r\n        successMessage: 'Podcast Detail has been added successfully.',\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case PodcastActionTypes.ADD_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Podcast Detail has not been added successfully.',\r\n      };\r\n    }\r\n    case PodcastActionTypes.EDIT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        podcast: action.payload,\r\n        successMessage: 'Podcast Detail has been updated successfully.',\r\n        errorMessage: null\r\n      };\r\n    }\r\n    case PodcastActionTypes.EDIT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Detail has not been updated.'\r\n      };\r\n    }\r\n    case PodcastActionTypes.DELETE_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            successMessage: 'Delete Successfully.'\r\n          };\r\n    }\r\n    case PodcastActionTypes.DELETE_FAILURE: {\r\n        return {\r\n            ...state,\r\n            errorMessage: 'There is an issue while deleting.'\r\n          };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "podcast",
                    "type": "Podcast | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "podcasts",
                    "type": "Podcast[] | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "successMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-d54547ec1a9ed5cb9c561edd61f9f1b6",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    mergeMap((action: authActions.LogIn) =>\r\n      this.authService.login(action.payload.email, action.payload.password)\r\n        .pipe(\r\n          map((user) => new authActions.LogInSuccess(user)\r\n        ), catchError(errorRes => {\r\n           return of (new authActions.LogInFailure(errorRes));\r\n        }))\r\n  ))",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE)\r\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    map((user) => {\r\n      this.authService.logout();\r\n      this.router.navigate(['/login']);\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    mergeMap((action: authActions.SignUp) =>\r\n      this.authService.register(action.payload.form)\r\n        .pipe(\r\n          map((user) => new authActions.SignUpSuccess(user)\r\n        ), catchError(errorRes => {\r\n           return of (new authActions.SignUpFailure(errorRes));\r\n        }))\r\n  ))",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE)\r\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Actions, ofType, Effect } from '@ngrx/effects';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport * as authActions from '../actions/auth.actions';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { AuthenticationService } from '../../services/authentication.service';\r\nimport {\r\n  AuthActionTypes\r\n} from '../actions/auth.actions';\r\n\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthenticationService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  @Effect()\r\n  LogIn: any = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    mergeMap((action: authActions.LogIn) =>\r\n      this.authService.login(action.payload.email, action.payload.password)\r\n        .pipe(\r\n          map((user) => new authActions.LogInSuccess(user)\r\n        ), catchError(errorRes => {\r\n           return of (new authActions.LogInFailure(errorRes));\r\n        }))\r\n  ));\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInFailure: any = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE)\r\n  );\r\n\r\n  @Effect()\r\n  SignUp: any = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    mergeMap((action: authActions.SignUp) =>\r\n      this.authService.register(action.payload.form)\r\n        .pipe(\r\n          map((user) => new authActions.SignUpSuccess(user)\r\n        ), catchError(errorRes => {\r\n           return of (new authActions.SignUpFailure(errorRes));\r\n        }))\r\n  ));\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpFailure: any = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE)\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogOut: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    map((user) => {\r\n      this.authService.logout();\r\n      this.router.navigate(['/login']);\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-99b7c9eccd27e1b62dd80df294310738",
            "file": "src/app/services/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user';\nimport { TokenStorageService } from './token.service';\nimport * as jwt_decode from 'jwt-decode';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n\n  constructor(private http: HttpClient, private tokenStorage: TokenStorageService) {\n  }\n\n  // Login function\n  login(email: string, password: string): any {\n    return this.http.post<any>(`${environment.apiUrl}/login`, { email, password }, httpOptions )\n      .pipe(map(user => {\n        // store user details and jwt token in seesion storage to keep user logged in between page refreshes\n        this.tokenStorage.saveToken(user.accessToken);\n        const decoded = jwt_decode(user.accessToken);\n        this.tokenStorage.saveUser(decoded);\n        return decoded;\n      }));\n  }\n\n  // Logout function for user\n  logout(): void {\n    this.tokenStorage.signOut();\n  }\n\n  // for register new user\n  register(user: User): any {\n    return this.http.post<any>(`${environment.apiUrl}/users/`, user, httpOptions )\n    .pipe(map((res: any) => {\n      // store user details and jwt token in seesion storage to keep user logged in between page refreshes\n      this.tokenStorage.saveToken(res.accessToken);\n      const decoded = jwt_decode(res.accessToken);\n      this.tokenStorage.saveUser(decoded);\n      return decoded;\n    })\n    );\n  }\n\n\n  // Fetch All users\n  getAll(): any {\n    return this.http.get<User[]>(`${environment.apiUrl}/users`);\n  }\n\n  // Fetch user by id\n  getById(id: string): any {\n      return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PodcastEffects",
            "id": "injectable-PodcastEffects-c78338f510373c4a7b1c9a6db5aab0f4",
            "file": "src/app/store/effects/podcast.effects.ts",
            "properties": [
                {
                    "name": "AddPodcast",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD),\r\n    mergeMap((action: podcastActions.AddPodcast) =>\r\n    this.podcastService.addEdit(action.payload.form, action.payload.id)\r\n        .pipe(\r\n          map((res) =>  new podcastActions.AddPodcastSuccess(res)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.AddPodcastFailure(error));\r\n            }\r\n        ))\r\n  ))",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "AddPodcastFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "AddPodcastSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "DeletePodcast",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE),\r\n    mergeMap((action: podcastActions.DeletePodcast) =>\r\n        this.podcastService.deletePodcast(action.payload.id)\r\n        .pipe(\r\n          map((data) => new podcastActions.DeletePodcastSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.DeletePodcastFailure(error));\r\n            }\r\n        ))\r\n    ))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeletePodcastFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "DeletePodcastSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE_SUCCESS),\r\n    map((data) =>\r\n      new podcastActions.LoadPodcast()\r\n    )\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "EditPodcast",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT),\r\n    mergeMap((action: podcastActions.EditPodcast) =>\r\n    this.podcastService.addEdit(action.payload.form, action.payload.id)\r\n    .pipe(\r\n      map((res) => new podcastActions.AddPodcastSuccess(res)\r\n      ), catchError((error) => {\r\n          return of(new podcastActions.AddPodcastFailure(error));\r\n        }\r\n    ))\r\n  ))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "EditPodcastFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "EditPodcastSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/login');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcast",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD),\r\n    mergeMap((action: podcastActions.LoadPodcast) =>\r\n        this.podcastService.getAll().pipe(\r\n          map((data) => new podcastActions.LoadPodcastSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.LoadPodcastFailure(error));\r\n            }\r\n        ))\r\n    ))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcastById",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID),\r\n    mergeMap((action: podcastActions.LoadById) =>\r\n        this.podcastService.getbyId(action.payload.id).pipe(\r\n          map((data) => new podcastActions.LoadByIdSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.LoadByIdFailure(error));\r\n            }\r\n        ))\r\n    ))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcastByIdFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcastByIdSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID_SUCCESS)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcastFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LoadPodcastSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\n\r\nimport { Actions, ofType, Effect } from '@ngrx/effects';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport * as podcastActions from '../actions/podcast.actions';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { PodcastService } from '../../services/podcast.service';\r\nimport {\r\n  PodcastActionTypes\r\n} from '../actions/podcast.actions';\r\n\r\n\r\n@Injectable()\r\nexport class PodcastEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private podcastService: PodcastService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  @Effect()\r\n  AddPodcast: any = this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD),\r\n    mergeMap((action: podcastActions.AddPodcast) =>\r\n    this.podcastService.addEdit(action.payload.form, action.payload.id)\r\n        .pipe(\r\n          map((res) =>  new podcastActions.AddPodcastSuccess(res)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.AddPodcastFailure(error));\r\n            }\r\n        ))\r\n  ));\r\n\r\n  @Effect({ dispatch: false })\r\n  AddPodcastSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  AddPodcastFailure: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.ADD_FAILURE)\r\n  );\r\n\r\n  @Effect()\r\n  EditPodcast: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT),\r\n    mergeMap((action: podcastActions.EditPodcast) =>\r\n    this.podcastService.addEdit(action.payload.form, action.payload.id)\r\n    .pipe(\r\n      map((res) => new podcastActions.AddPodcastSuccess(res)\r\n      ), catchError((error) => {\r\n          return of(new podcastActions.AddPodcastFailure(error));\r\n        }\r\n    ))\r\n  ));\r\n\r\n  @Effect({ dispatch: false })\r\n  EditPodcastSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/login');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  EditPodcastFailure: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.EDIT_FAILURE)\r\n  );\r\n\r\n  @Effect({ dispatch: true})\r\n  DeletePodcast: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE),\r\n    mergeMap((action: podcastActions.DeletePodcast) =>\r\n        this.podcastService.deletePodcast(action.payload.id)\r\n        .pipe(\r\n          map((data) => new podcastActions.DeletePodcastSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.DeletePodcastFailure(error));\r\n            }\r\n        ))\r\n    ));\r\n\r\n  @Effect({ dispatch: false })\r\n    DeletePodcastSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE_SUCCESS),\r\n    map((data) =>\r\n      new podcastActions.LoadPodcast()\r\n    )\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  DeletePodcastFailure: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.DELETE_FAILURE)\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  LoadPodcast: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD),\r\n    mergeMap((action: podcastActions.LoadPodcast) =>\r\n        this.podcastService.getAll().pipe(\r\n          map((data) => new podcastActions.LoadPodcastSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.LoadPodcastFailure(error));\r\n            }\r\n        ))\r\n    ));\r\n\r\n  @Effect({ dispatch: true })\r\n  LoadPodcastById: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID),\r\n    mergeMap((action: podcastActions.LoadById) =>\r\n        this.podcastService.getbyId(action.payload.id).pipe(\r\n          map((data) => new podcastActions.LoadByIdSuccess(data)\r\n          ), catchError((error) => {\r\n              return of(new podcastActions.LoadByIdFailure(error));\r\n            }\r\n        ))\r\n    ));\r\n\r\n  @Effect({ dispatch: false })\r\n    LoadPodcastByIdSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID_SUCCESS)\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LoadPodcastByIdFailure: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOADBYID_FAILURE)\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n    LoadPodcastSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD_SUCCESS),\r\n    map((user) => {\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LoadPodcastFailure: Observable<any> = this.actions.pipe(\r\n    ofType(PodcastActionTypes.LOAD_FAILURE)\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "podcastService",
                        "type": "PodcastService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "podcastService",
                        "type": "PodcastService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PodcastService",
            "id": "injectable-PodcastService-b4a807a85537edd639a6ea86a4dbd2f3",
            "file": "src/app/services/podcast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addEdit",
                    "args": [
                        {
                            "name": "podcast",
                            "type": "Podcast"
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "podcast",
                            "type": "Podcast",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePodcast",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "getbyId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Podcast } from '../models/podcast';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PodcastService {\n\n  constructor(private http: HttpClient) { }\n\n  // Add and update podcast details\n  addEdit(podcast: Podcast, id = ''): any {\n    if (id) {\n      return this.http.put(`${environment.apiUrl}/podcasts/${id}`, podcast);\n    }\n    return this.http.post(`${environment.apiUrl}/podcasts/`, podcast);\n  }\n\n  // get All podcasts\n  getAll(): any {\n    return this.http.get(`${environment.apiUrl}/podcasts/`);\n  }\n\n  // delete podcasts by id\n  deletePodcast(id: string): any {\n    return this.http.delete(`${environment.apiUrl}/podcasts/${id}`);\n  }\n\n  // get podcasts by id\n  getbyId(id: string): any {\n    return this.http.get(`${environment.apiUrl}/podcasts/${id}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-7f5a6256e904dbc762b533b8bd26b616",
            "file": "src/app/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport const darkTheme = {\n  'header-bg': '#e5e5e5',\n  'heading-color': '#ccd1da',\n  'primary-color': '#2d2d2d',\n  'background-color': '#1f2935',\n  'text-color': '#e5e5e5',\n};\n\nexport const lightTheme = {\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d',\n  'header-bg': '#1f2935',\n  'heading-color': '#4285F4'\n};\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeService {\n\n  toggleDark(): void {\n    this.setTheme(darkTheme);\n  }\n\n  toggleLight(): void {\n    this.setTheme(lightTheme);\n  }\n\n  public setTheme(theme: {}): void {\n    Object.keys(theme).forEach(k =>\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\n    );\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "TokenStorageService",
            "id": "injectable-TokenStorageService-de4106e88aa341153fbdf3326282c724",
            "file": "src/app/services/token.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  // clear all the storage data on logout\n  signOut(): void {\n    window.sessionStorage.clear();\n  }\n\n  // store token data\n  public saveToken(token: string): void {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  // get token data\n  public getToken(): string {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  // store user data\n  public saveUser(user): void {\n    window.sessionStorage.removeItem(USER_KEY);\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  // get user data\n  public getUser(): string {\n    return JSON.parse(sessionStorage.getItem(USER_KEY));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddPodcast",
            "id": "class-AddPodcast-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.ADD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddPodcastFailure",
            "id": "class-AddPodcastFailure-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.ADD_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddPodcastSuccess",
            "id": "class-AddPodcastSuccess-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.ADD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeletePodcast",
            "id": "class-DeletePodcast-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeletePodcastFailure",
            "id": "class-DeletePodcastFailure-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.DELETE_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeletePodcastSuccess",
            "id": "class-DeletePodcastSuccess-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.DELETE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditPodcast",
            "id": "class-EditPodcast-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.EDIT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditPodcastFailure",
            "id": "class-EditPodcastFailure-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.EDIT_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditPodcastSuccess",
            "id": "class-EditPodcastSuccess-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.EDIT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetStatus",
            "id": "class-GetStatus-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.GET_STATUS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadById",
            "id": "class-LoadById-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOADBYID",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadByIdFailure",
            "id": "class-LoadByIdFailure-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOADBYID_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadByIdSuccess",
            "id": "class-LoadByIdSuccess-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOADBYID_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadPodcast",
            "id": "class-LoadPodcast-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadPodcastFailure",
            "id": "class-LoadPodcastFailure-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOAD_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadPodcastSuccess",
            "id": "class-LoadPodcastSuccess-59ccaa17dde271f15f99d6ea3589691b",
            "file": "src/app/store/actions/podcast.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\n\r\nexport enum PodcastActionTypes {\r\n  ADD = '[Podcast] Add',\r\n  ADD_SUCCESS = '[Podcast] Add Success',\r\n  ADD_FAILURE = '[Podcast] Add Failure',\r\n  EDIT = '[Podcast] Edit',\r\n  EDIT_SUCCESS = '[Podcast] Edit Success',\r\n  EDIT_FAILURE = '[Podcast] Edit Failure',\r\n  DELETE = '[Podcast] Delete',\r\n  DELETE_SUCCESS = '[Podcast] Delete Success',\r\n  DELETE_FAILURE = '[Podcast] Delete Failure',\r\n  LOAD = '[Podcast] Load',\r\n  LOAD_SUCCESS = '[Podcast] Load Success',\r\n  LOAD_FAILURE = '[Podcast] Load Failure',\r\n  LOADBYID = '[Podcast] Load By Id',\r\n  LOADBYID_SUCCESS = '[Podcast] Load By Id Success',\r\n  LOADBYID_FAILURE = '[Podcast] Load By Id Failure',\r\n}\r\n\r\nexport class AddPodcast implements Action {\r\n  readonly type = PodcastActionTypes.ADD;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.ADD_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.ADD_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcast implements Action {\r\n  readonly type = PodcastActionTypes.EDIT;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastSuccess implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class EditPodcastFailure implements Action {\r\n  readonly type = PodcastActionTypes.EDIT_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcast implements Action {\r\n  readonly type = PodcastActionTypes.DELETE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class DeletePodcastSuccess implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class DeletePodcastFailure implements Action {\r\n    readonly type = PodcastActionTypes.DELETE_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\nexport class LoadPodcast implements Action {\r\n    readonly type = PodcastActionTypes.LOAD;\r\n  }\r\n\r\nexport class LoadPodcastSuccess implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_SUCCESS;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadPodcastFailure implements Action {\r\n      readonly type = PodcastActionTypes.LOAD_FAILURE;\r\n      constructor(public payload: any) {}\r\n    }\r\n\r\nexport class LoadById implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID;\r\n        constructor(public payload: any) {}\r\n      }\r\nexport class LoadByIdSuccess implements Action {\r\n        readonly type = PodcastActionTypes.LOADBYID_SUCCESS;\r\n        constructor(public payload: any) {}\r\n}\r\nexport class LoadByIdFailure implements Action {\r\n            readonly type = PodcastActionTypes.LOADBYID_FAILURE;\r\n            constructor(public payload: any) {}\r\n          }\r\n\r\nexport type All =\r\n  | AddPodcast\r\n  | AddPodcastSuccess\r\n  | AddPodcastFailure\r\n  | EditPodcast\r\n  | EditPodcastSuccess\r\n  | EditPodcastFailure\r\n  | DeletePodcast\r\n  | DeletePodcastSuccess\r\n  | DeletePodcastFailure\r\n  | LoadPodcast\r\n  | LoadById\r\n  | LoadByIdSuccess\r\n  | LoadByIdFailure\r\n  | LoadPodcastSuccess\r\n  | LoadPodcastFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "PodcastActionTypes.LOAD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Podcast",
            "id": "class-Podcast-48bef28dd386c2d7a0b2bbd685fc6cde",
            "file": "src/app/models/podcast.ts",
            "type": "class",
            "sourceCode": "export class Podcast {\r\n    id?: number;\r\n    title?: string;\r\n    desc?: string;\r\n    categories?: Array<string>;\r\n    userId?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "categories",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "desc",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-a17ece1a4d8bb3466851cb76f3d22c97",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n  GET_STATUS = '[Auth] GetStatus'\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport class GetStatus implements Action {\r\n  readonly type = AuthActionTypes.GET_STATUS;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n  | GetStatus;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-e3f04eb957106b9bb974fe693ea40b55",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    id?: number;\r\n    email?: string;\r\n    password?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    token?: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddEditPodcastComponent",
            "id": "component-AddEditPodcastComponent-248aa2c8e3542e5673547cbd162316af",
            "file": "src/app/components/add-edit-podcast/add-edit-podcast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit-podcast",
            "styleUrls": [
                "./add-edit-podcast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-edit-podcast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "items",
                    "defaultValue": "['Art', 'Comedy  ', 'Action', 'Fiction', 'Music', 'News']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "podcast",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscription",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "successMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "defaultValue": "{sub: null}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AddPodcast, LoadById } from 'src/app/store/actions/podcast.actions';\nimport { AppState, selectAuthState } from 'src/app/store/app.states';\n\n@Component({\n  selector: 'app-add-edit-podcast',\n  templateUrl: './add-edit-podcast.component.html',\n  styleUrls: ['./add-edit-podcast.component.scss']\n})\nexport class AddEditPodcastComponent implements OnInit, OnDestroy {\n\n  form: FormGroup;\n  subscription: any;\n  id = '';\n  podcast: any;\n  submitted = false;\n  items = ['Art', 'Comedy  ', 'Action', 'Fiction', 'Music', 'News'];\n  getState: Observable<any>;\n  isAuthenticated: false;\n  user = {sub: null};\n  errorMessage = null;\n  successMessage = null;\n\n\n  constructor(private fb: FormBuilder, private route: ActivatedRoute,\n              private router: Router, private store: Store<AppState>) {\n                this.getState = this.store.select(selectAuthState);\n               }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      title: [null, Validators.compose(\n        [Validators.maxLength(20), Validators.required])],\n      desc: [null,  Validators.required],\n      categories: [null,  Validators.required],\n      userId: [this.user.sub]\n    });\n\n    this.id = this.route.snapshot.paramMap.get('id');\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.errorMessage = state.errorMessage;\n      this.user = state.user;\n    });\n\n    this.subscription = this.store.subscribe((res: any) => {\n      this.podcast = res.podcast.podcast;\n      if (this.podcast !== null) {\n        this.form.patchValue({\n          title: this.podcast.title,\n          desc: this.podcast.desc,\n          categories: this.podcast.categories,\n          userId: this.podcast.userId });\n      }\n    });\n\n    if (this.id) {\n      this.store.dispatch(new LoadById({id: this.id}));\n    }\n  }\n\n  get f(): any { return this.form.controls; }\n\n\n  /*\n  ** Back to the main Page   **\n  */\n  public back(): void {\n    this.router.navigateByUrl('');\n  }\n\n   /*\n  **  Submit Form   **\n  */\n  public onSubmit(): void {\n    if (this.form.invalid) {\n      return;\n   }\n    this.submitted = true;\n    if (!this.form.value ) { return; }\n\n    const payload = {\n      form: this.form.value,\n      id: this.id\n    };\n    this.store.dispatch(new AddPodcast(payload));\n    this.subscription =  this.store.subscribe((res) => {\n      this.router.navigateByUrl('/');\n    });\n  }\n\n  // Destro Subscription\n  ngOnDestroy(): void{\n    this.subscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container{\r\n    margin: 0 auto;\r\n    width: 50%;\r\n    text-align: center;\r\n    h1 {\r\n        color: var(--heading-color);\r\n    }\r\n    form{\r\n        & .form-group {\r\n            label  {\r\n                text-align: left;\r\n            }\r\n        }\r\n        \r\n    }\r\n    & .invalid-feedback {\r\n        color:red;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {        \r\n\r\n    .form-container, .register-container{\r\n        width: 100%;\r\n    }\r\n}\r\n",
                    "styleUrl": "./add-edit-podcast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "any",
                        "returnType": "any",
                        "line": 66
                    }
                }
            },
            "templateData": "<div class=\"form-container\">\n    <h1 *ngIf=\"!id\">  Add Poadcast</h1>\n    <h1 *ngIf=\"id\">  Edit Poadcast</h1>\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"title\" required aria-label=\"Podcast Title\">\n        \n            <div *ngIf=\"f.title.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.title.errors?.required\" class=\"invalid-feedback\">\n                    Title is required\n                </div>\n            </div>\n        \n            <div *ngIf=\"f.title.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.title.errors?.maxlength\" class=\"invalid-feedback\">\n                    Title must not be more than 20 characters long.\n                </div>\n            </div> \n        </div>\n        <div class=\"form-group\">\n            <label for=\"desc\">Description</label>\n            <textarea class=\"form-control\" rowa=\"10\" cols=\"100\" formControlName=\"desc\" requiredcaria-label=\"Podcast Description\"></textarea>\n        \n            <div *ngIf=\"f.desc.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.desc.errors?.required\" class=\"invalid-feedback\">\n                    Description is required\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"categories\">Categories</label>\n            <tag-input [ngModel]=\"items\" formControlName=\"categories\" aria-label=\"Podcast Categories\">\n            </tag-input>\n         \n            <div *ngIf=\"f.categories.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.categories.errors?.required\" class=\"invalid-feedback\">\n                    Category is required\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <div *ngIf=\"user\">\n                <input type=\"hidden\" formControlName=\"userId\" value=\"{{user.sub}}\" >\n            </div>\n            <button type=\"submit\" *ngIf=\"!id\" class=\"btn btn-success\">Submit</button>\n            <button type=\"submit\" *ngIf=\"id\" class=\"btn btn-success\">Update</button>\n            <button type=\"button\" (click)=\"back()\" class=\"btn btn-success\">Back</button>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-51d4c779393d4468b2926e982f3a9325",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "defaultValue": "'Podcast Listings'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Podcast Listings';\n  selectedTheme = false;\n\n  // Get theme data from header component\n  /* getTheme(data): void {\n    console.log(data, 'data');\n    this.selectedTheme = data;\n  } */\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-container{\r\n    background-color: var(--background-color);\r\n    .container {\r\n        padding: 20px;        \r\n    }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div  [ngClass]=\"{\n    'dark':selectedTheme,\n    'light':!selectedTheme\n  }\">\n    <div class=\"main-container\">\n        <app-header></app-header>\n        <div class=\"container\">\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c0a918d6fe84cd730fd6e1b133f30477",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selTheme",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "sendVal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { selectAuthState } from '../../store/app.states';\nimport { LogOut } from '../../store/actions/auth.actions';\nimport { Observable } from 'rxjs';\nimport { ThemeService } from '../../services/theme.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  @Output() selTheme: EventEmitter<boolean> = new EventEmitter();\n\n  getState: Observable<any>;\n  isAuthenticated: false;\n  user = null;\n  errorMessage = null;\n  selectedTheme = false;\n\n  constructor(private store: Store, private themeService: ThemeService)\n  {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.user = state.user;\n      this.errorMessage = state.errorMessage;\n    });\n  }\n  // Logout\n  logout(): void {\n    this.store.dispatch(new LogOut());\n  }\n\n  // Theme change\n  sendVal(event: any): void {\n    if (event && event.keyCode  === 13 || !event) {\n      this.selectedTheme = !this.selectedTheme;\n      if (this.selectedTheme) {\n        this.themeService.toggleDark();\n      } else {\n        this.themeService.toggleLight();\n      }\n      // this.selTheme.emit(this.selectedTheme);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n  height: 50px;\r\n  width: 98.5%;\r\n  padding:10px;\r\n  background-color: var(--header-bg);\r\n  color: var(--text-color);\r\n  \r\n  .header-left {\r\n      width:85%;\r\n      display: inline-block;\r\n      & .navbar-brand {\r\n          width: 45%;\r\n          display: inline-block;\r\n          text-decoration: none;\r\n          color: var(--header-color);\r\n      }\r\n      ul{\r\n          width: 44%;\r\n          display: inline-block;\r\n          li {\r\n              display: inline-block;\r\n              padding: 0 10px;\r\n              a {\r\n                text-decoration: none;\r\n                color: var(--header-color);\r\n              }\r\n          }\r\n      }\r\n\r\n  }\r\n  .header-right {\r\n      width:14%;\r\n      display: inline-block;\r\n      span {\r\n          padding-right: 10px;\r\n      }\r\n  /* The switch - the box around the slider */\r\n  .switch {\r\n      position: relative;\r\n      display: inline-block;\r\n      width: 54px;\r\n      height: 27px;\r\n    }\r\n    \r\n    /* Hide default HTML checkbox */\r\n    .switch input {\r\n      opacity: 0;\r\n      width: 0;\r\n      height: 0;\r\n    }\r\n    \r\n    /* The slider */\r\n    .slider {\r\n      position: absolute;\r\n      cursor: pointer;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background-color: #ccc;\r\n      -webkit-transition: .4s;\r\n      transition: .4s;\r\n    }\r\n    \r\n    .slider:before {\r\n      position: absolute;\r\n      content: \"\";\r\n      height: 20px;\r\n      width: 20px;\r\n      left: 4px;\r\n      bottom: 4px;\r\n      background-color: white;\r\n      -webkit-transition: .4s;\r\n      transition: .4s;\r\n    }\r\n    \r\n    input:checked + .slider {\r\n      background-color: #2196F3;\r\n    }\r\n    \r\n    input:focus + .slider {\r\n      box-shadow: 0 0 1px #2196F3;\r\n    }\r\n    \r\n    input:checked + .slider:before {\r\n      -webkit-transform: translateX(26px);\r\n      -ms-transform: translateX(26px);\r\n      transform: translateX(26px);\r\n    }\r\n    \r\n    /* Rounded sliders */\r\n    .slider.round {\r\n      border-radius: 34px;\r\n    }\r\n    \r\n    .slider.round:before {\r\n      border-radius: 50%;\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 1000px) {        \r\n  .main-container{\r\n      & .header {\r\n          & .header-left {\r\n              width: 75%;\r\n          }\r\n          & .header-right {\r\n              width: 25%;\r\n          }\r\n      }\r\n      .podcast-container {\r\n              & .card {\r\n                  width: 40%;                \r\n              }\r\n          \r\n      }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {        \r\n    .header {\r\n      .header-left {\r\n          & .navbar-brand {\r\n              width: 25%;                    \r\n          }\r\n          ul{\r\n              width: 75%;\r\n              padding-left: 0;                    \r\n          }\r\n          \r\n    \r\n      }\r\n      .header-right {                \r\n          .theme-text {\r\n              display: none;\r\n          }\r\n      \r\n      }\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 320px) {\r\n      \r\n  .header {\r\n    .header-left {\r\n        width: 80%;\r\n    }\r\n    .header-right {  \r\n        width: 10%;            \r\n    }\r\n  }\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\" >\n  <div class=\"header-left\">\n  <nav class=\"navbar navbar-light\">\n      <div class=\"container\">\n        <a class=\"navbar-brand\" routerLink=\"/\">Podcasts</a>  \n        <ul class=\"nav navbar-nav pull-xs-right\">  \n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink=\"/\" routerLinkActive=\"active\"> Home </a>\n          </li>  \n          <li class=\"nav-item\" *ngIf=\"!isAuthenticated\">\n            <a class=\"nav-link\" routerLink=\"/login\" routerLinkActive=\"active\"> Sign in</a>\n          </li> \n          <li class=\"nav-item\" *ngIf=\"!isAuthenticated\">\n              <a class=\"nav-link\" routerLink=\"/register\" routerLinkActive=\"active\">Sign up</a>\n            </li> \n            <li class=\"nav-item\" *ngIf=\"isAuthenticated\">\n              <a class=\"nav-link\" (click)=\"logout()\"> Logout</a>\n          </li> \n          <li class=\"nav-item\" *ngIf=\"isAuthenticated\">\n              <a class=\"nav-link\" routerLink=\"/add-podcast\" routerLinkActive=\"active\"> Add Podcast</a>\n          </li> \n        </ul>  \n      </div>\n    </nav>\n  </div>\n  <div class=\"header-right\">\n      <span class=\"theme-text\">Change Theme</span>\n    <label class=\"switch\">\n      <input type=\"checkbox\" [checked]=\"selectedTheme\" (change)=\"sendVal('')\" (keydown)=\"sendVal($event)\" aria-label=\"Theme Change\">\n      <span class=\"slider round\" tabindex=\"0\"></span>\n    </label>\n  </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-85613913a6ddd3d0334606b97895335f",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isAuthenticated",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "podcasts",
                    "type": "Podcast[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "successMessage",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "deletePodcast",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPodcasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { PodcastService } from 'src/app/services/podcast.service';\nimport { Podcast } from '../../models/podcast';\nimport { Store } from '@ngrx/store';;\nimport { Observable } from 'rxjs';\nimport { User } from 'src/app/models/user';\nimport { Router } from '@angular/router';\nimport { DeletePodcast, LoadPodcast } from 'src/app/store/actions/podcast.actions';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  podcasts: Podcast[];\n  getState: Observable<any>;\n  isAuthenticated: any;\n  user: User;\n  errorMessage: any;\n  successMessage: any;\n\n  constructor(private store: Store) {\n    // this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getAllPodcasts();\n  }\n\n  // Get All Podcast\n  getAllPodcasts(): void{\n    this.store.dispatch(new LoadPodcast());\n    this.store.subscribe((res: any) => {\n      this.isAuthenticated = res.auth.isAuthenticated;\n      this.user = res.auth.user;\n      this.errorMessage = res.auth.errorMessage;\n      this.podcasts = res.podcast.podcasts;\n    });\n  }\n\n  // delete podcast\n  deletePodcast(id): void {\n    if (confirm('Are you sure, you want to delete podcast?')) {\n      const payload = {\n        id\n      };\n\n      this.store.dispatch(new DeletePodcast(payload));\n      this.store.subscribe((res: any) => {\n        if (res.podcast.successMessage) {\n        }\n      });\n      this.getAllPodcasts();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".podcast-container {\r\n    & .card {\r\n        width: 21%;\r\n        display: inline-grid;\r\n        border: 1px solid gray;\r\n        border-radius: 10px;\r\n        margin: 10px;\r\n        min-height: 165px;\r\n        padding: 5px 10px;\r\n        background: linear-gradient(45deg, rgba(66, 183, 245, 0.8) 0%, rgba(66, 245, 189, 0.1) 100%);\r\n        \r\n        & .card-header {\r\n            .right {\r\n              float: right;\r\n              a{\r\n                  padding: 5px;\r\n                  color: var(--text-color);\r\n              }\r\n            }\r\n            h2 {\r\n                color: var(--heading-color);\r\n            }\r\n        }\r\n        & .card-body {\r\n            p {\r\n               font-weight: 500;\r\n               color: var(--text-color);\r\n               word-break: break-all;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n@media only screen and (max-width: 1000px) {  \r\n    .podcast-container {\r\n            & .card {\r\n                width: 40%;                \r\n            }\r\n        \r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {        \r\n    .podcast-container {\r\n            & .card {\r\n                width: 85%;                \r\n            }\r\n        \r\n    }\r\n    \r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"podcast-container\">\n    <div class=\"card\" *ngFor=\"let podcast of podcasts;\">\n        <div class=\"card-header\">\n            <div class=\"right\">\n                <a [routerLink]=\"['/add-podcast',podcast.id]\" *ngIf=\"(isAuthenticated && user.sub === podcast.userId)\">Edit</a>\n                <a (click)=\"deletePodcast(podcast.id)\" *ngIf=\"(isAuthenticated && user.sub === podcast.userId)\">Delete</a>\n            </div>\n            <h2 tabindex=\"0\" >{{ (podcast.title.length>20)? (podcast.title | slice:0:20)+'..':(podcast.title) | titlecase }}</h2>\n        </div>\n        <div class=\"card-body\">\n            <p>{{podcast.categories}}</p>\n            <p>Descriprion -  {{ (podcast.desc.length>30)? (podcast.desc | slice:0:30)+'..':(podcast.desc) | titlecase }}</p>\n        </div>\n    </div>\n</div>\n\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-214d7c304c767cbfab5116b2255ad282",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "returnUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { User } from '../../models/user';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState  } from '../../store/app.states';\nimport { LogIn } from '../../store/actions/auth.actions';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    submitted = false;\n    returnUrl: string;\n\n    user: User = new User();\n    getState: Observable<any>;\n    errorMessage: string | null;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private store: Store<AppState>\n    ) {\n        this.getState = this.store.select(selectAuthState);\n    }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            email: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        this.getState.subscribe((state) => {\n            this.errorMessage = state.errorMessage;\n            console.log(this.errorMessage);\n          });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f(): any { return this.loginForm.controls; }\n\n    // submit function\n    onSubmit(): any {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        const payload = {\n            email: this.f.email.value,\n            password: this.f.password.value\n          };\n        this.store.dispatch(new LogIn(payload));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container{\r\n    margin: 0 auto;\r\n    width: 50%;\r\n    text-align: center;\r\n    h1 {\r\n        color: var(--heading-color);\r\n    }\r\n    form{\r\n        & .form-group {\r\n            label  {\r\n                text-align: left;\r\n            }\r\n        }\r\n        \r\n    }\r\n    & .invalid-feedback {\r\n        color:red;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {        \r\n\r\n    .login-container, .register-container{\r\n        width: 100%;\r\n    }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "any",
                        "returnType": "any",
                        "line": 49
                    }
                }
            },
            "templateData": "<div class=\"login-container\">\n    <h1>Login</h1>\n    <div class=\"invalid-feedback\">{{errorMessage}}</div>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" aria-label=\"User Email\"/>\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" aria-label=\"User Password\"/>\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button class=\"btn btn-primary\" tabindex=\"0\">\n                Login\n            </button>\n            <a routerLink=\"/register\" class=\"btn btn-link\" tabindex=\"0\">Register</a>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-4863fd0be601ddc193bade750c6e07e9",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { SignUp } from '../../store/actions/auth.actions';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { Observable } from 'rxjs';\nimport { selectAuthState } from 'src/app/store/app.states';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\n\nexport class RegisterComponent implements OnInit {\n    registerForm: FormGroup;\n    submitted = false;\n\n    getState: Observable<any>;\n    errorMessage: string | null;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private store: Store\n    ) { this.getState = this.store.select(selectAuthState); }\n\n    ngOnInit(): void {\n        this.registerForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]]\n        });\n\n        this.getState.subscribe((state) => {\n            console.log(state, 'state');\n            this.errorMessage = state.errorMessage;\n          });\n    }\n\n    // convenience getter for easy access to form fields\n    get f(): any { return this.registerForm.controls; }\n\n    // submit form\n    onSubmit(): void {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        const payload = {\n            form: this.registerForm.value\n          };\n        this.store.dispatch(new SignUp(payload));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".register-container {\r\n    margin: 0 auto;\r\n    width: 50%;\r\n    text-align: center;\r\n    h1 {\r\n        color: var(--heading-color);;\r\n    }\r\n    form{\r\n        & .form-group {\r\n            label  {\r\n                text-align: left;\r\n            }\r\n        }\r\n    }\r\n    .invalid-feedback {\r\n        color: var(--error-color);\r\n    }\r\n}",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "any",
                        "returnType": "any",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"register-container\">\n    <div class=\"card\">\n        <h1 class=\"card-header\">Register</h1>\n        <div class=\"invalid-feedback\">{{errorMessage}}</div>\n        <div class=\"card-body\">\n            <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <label for=\"firstName\">First Name</label>\n                    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n                    <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"lastName\">Last Name</label>\n                    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n                    <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n                    <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                        <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <button class=\"btn btn-primary\" tabindex=\"0\">\n                        Register\n                    </button>\n                    <a routerLink=\"../login\" class=\"btn btn-link\" tabindex=\"0\">Cancel</a>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddEditPodcastComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AddPodcast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'header-bg': '#e5e5e5',\n  'heading-color': '#ccd1da',\n  'primary-color': '#2d2d2d',\n  'background-color': '#1f2935',\n  'text-color': '#e5e5e5',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000'\n}"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/Login.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/register/Register.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/authentication.service.ts",
                "type": "object",
                "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/podcast.service.ts",
                "type": "object",
                "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/podcast.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n    podcast: null,\r\n    podcasts: [],\r\n    successMessage: null,\r\n    errorMessage: null\r\n}"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d',\n  'header-bg': '#1f2935',\n  'heading-color': '#4285F4'\n}"
            },
            {
                "name": "LogOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n  auth: auth.reducer,\r\n  podcast: podcast.reducer\r\n}"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "SignIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SignUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                "type": "Story<AddEditPodcastComponent>",
                "defaultValue": "(args: AddEditPodcastComponent) => ({\r\n  component: AddEditPodcastComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/Login.stories.ts",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/home/Home.stories.ts",
                "type": "Story<HomeComponent>",
                "defaultValue": "(args: HomeComponent) => ({\r\n  component: HomeComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/register/Register.stories.ts",
                "type": "Story<RegisterComponent>",
                "defaultValue": "(args: RegisterComponent) => ({\r\n  component: RegisterComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/home/Home.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TOKEN_HEADER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/auth.interceptor.ts",
                "type": "string",
                "defaultValue": "'Authorization'"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/token.service.ts",
                "type": "string",
                "defaultValue": "'auth-token'"
            },
            {
                "name": "USER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/token.service.ts",
                "type": "string",
                "defaultValue": "'auth-user'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/podcast.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | GetStatus",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddPodcast | AddPodcastSuccess | AddPodcastFailure | EditPodcast | EditPodcastSuccess | EditPodcastFailure | DeletePodcast | DeletePodcastSuccess | DeletePodcastFailure | LoadPodcast | LoadById | LoadByIdSuccess | LoadByIdFailure | LoadPodcastSuccess | LoadPodcastFailure",
                "file": "src/app/store/actions/podcast.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    },
                    {
                        "name": "GET_STATUS",
                        "value": "[Auth] GetStatus"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            },
            {
                "name": "PodcastActionTypes",
                "childs": [
                    {
                        "name": "ADD",
                        "value": "[Podcast] Add"
                    },
                    {
                        "name": "ADD_SUCCESS",
                        "value": "[Podcast] Add Success"
                    },
                    {
                        "name": "ADD_FAILURE",
                        "value": "[Podcast] Add Failure"
                    },
                    {
                        "name": "EDIT",
                        "value": "[Podcast] Edit"
                    },
                    {
                        "name": "EDIT_SUCCESS",
                        "value": "[Podcast] Edit Success"
                    },
                    {
                        "name": "EDIT_FAILURE",
                        "value": "[Podcast] Edit Failure"
                    },
                    {
                        "name": "DELETE",
                        "value": "[Podcast] Delete"
                    },
                    {
                        "name": "DELETE_SUCCESS",
                        "value": "[Podcast] Delete Success"
                    },
                    {
                        "name": "DELETE_FAILURE",
                        "value": "[Podcast] Delete Failure"
                    },
                    {
                        "name": "LOAD",
                        "value": "[Podcast] Load"
                    },
                    {
                        "name": "LOAD_SUCCESS",
                        "value": "[Podcast] Load Success"
                    },
                    {
                        "name": "LOAD_FAILURE",
                        "value": "[Podcast] Load Failure"
                    },
                    {
                        "name": "LOADBYID",
                        "value": "[Podcast] Load By Id"
                    },
                    {
                        "name": "LOADBYID_SUCCESS",
                        "value": "[Podcast] Load By Id Success"
                    },
                    {
                        "name": "LOADBYID_FAILURE",
                        "value": "[Podcast] Load By Id Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/podcast.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/header/Header.stories.ts": [
                {
                    "name": "AddPodcast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LogOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SignIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SignUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/app.stories.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'header-bg': '#e5e5e5',\n  'heading-color': '#ccd1da',\n  'primary-color': '#2d2d2d',\n  'background-color': '#1f2935',\n  'text-color': '#e5e5e5',\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d',\n  'header-bg': '#1f2935',\n  'heading-color': '#4285F4'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000'\n}"
                }
            ],
            "src/app/components/add-edit-podcast/addEdit.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                    "type": "Story<AddEditPodcastComponent>",
                    "defaultValue": "(args: AddEditPodcastComponent) => ({\r\n  component: AddEditPodcastComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/login/Login.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/Login.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/Login.stories.ts",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/register/Register.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/register/Register.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/register/Register.stories.ts",
                    "type": "Story<RegisterComponent>",
                    "defaultValue": "(args: RegisterComponent) => ({\r\n  component: RegisterComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/services/authentication.service.ts": [
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/authentication.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
                }
            ],
            "src/app/services/podcast.service.ts": [
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/podcast.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null\r\n}"
                }
            ],
            "src/app/store/reducers/podcast.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/podcast.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    podcast: null,\r\n    podcasts: [],\r\n    successMessage: null,\r\n    errorMessage: null\r\n}"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  auth: auth.reducer,\r\n  podcast: podcast.reducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/components/home/Home.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/home/Home.stories.ts",
                    "type": "Story<HomeComponent>",
                    "defaultValue": "(args: HomeComponent) => ({\r\n  component: HomeComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/home/Home.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/helpers/auth.interceptor.ts": [
                {
                    "name": "TOKEN_HEADER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/auth.interceptor.ts",
                    "type": "string",
                    "defaultValue": "'Authorization'"
                }
            ],
            "src/app/services/token.service.ts": [
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/token.service.ts",
                    "type": "string",
                    "defaultValue": "'auth-token'"
                },
                {
                    "name": "USER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/token.service.ts",
                    "type": "string",
                    "defaultValue": "'auth-user'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/podcast.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/podcast.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        },
                        {
                            "name": "GET_STATUS",
                            "value": "[Auth] GetStatus"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ],
            "src/app/store/actions/podcast.actions.ts": [
                {
                    "name": "PodcastActionTypes",
                    "childs": [
                        {
                            "name": "ADD",
                            "value": "[Podcast] Add"
                        },
                        {
                            "name": "ADD_SUCCESS",
                            "value": "[Podcast] Add Success"
                        },
                        {
                            "name": "ADD_FAILURE",
                            "value": "[Podcast] Add Failure"
                        },
                        {
                            "name": "EDIT",
                            "value": "[Podcast] Edit"
                        },
                        {
                            "name": "EDIT_SUCCESS",
                            "value": "[Podcast] Edit Success"
                        },
                        {
                            "name": "EDIT_FAILURE",
                            "value": "[Podcast] Edit Failure"
                        },
                        {
                            "name": "DELETE",
                            "value": "[Podcast] Delete"
                        },
                        {
                            "name": "DELETE_SUCCESS",
                            "value": "[Podcast] Delete Success"
                        },
                        {
                            "name": "DELETE_FAILURE",
                            "value": "[Podcast] Delete Failure"
                        },
                        {
                            "name": "LOAD",
                            "value": "[Podcast] Load"
                        },
                        {
                            "name": "LOAD_SUCCESS",
                            "value": "[Podcast] Load Success"
                        },
                        {
                            "name": "LOAD_FAILURE",
                            "value": "[Podcast] Load Failure"
                        },
                        {
                            "name": "LOADBYID",
                            "value": "[Podcast] Load By Id"
                        },
                        {
                            "name": "LOADBYID_SUCCESS",
                            "value": "[Podcast] Load By Id Success"
                        },
                        {
                            "name": "LOADBYID_FAILURE",
                            "value": "[Podcast] Load By Id Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/podcast.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | GetStatus",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/podcast.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddPodcast | AddPodcastSuccess | AddPodcastFailure | EditPodcast | EditPodcastSuccess | EditPodcastFailure | DeletePodcast | DeletePodcastSuccess | DeletePodcastFailure | LoadPodcast | LoadById | LoadByIdSuccess | LoadByIdFailure | LoadPodcastSuccess | LoadPodcastFailure",
                    "file": "src/app/store/actions/podcast.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "add-podcast",
                        "component": "AddEditPodcastComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "add-podcast/:id",
                        "component": "AddEditPodcastComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-edit-podcast/add-edit-podcast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEditPodcastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-edit-podcast/addEdit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddPodcast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/Home.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/Home.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/Register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/Register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_HEADER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/podcast.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Podcast",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/authentication.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/podcast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PodcastService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/podcast.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/token.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/token.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetStatus",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddPodcast",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddPodcastFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddPodcastSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeletePodcast",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeletePodcastFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeletePodcastSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditPodcast",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditPodcastFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditPodcastSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadById",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPodcast",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPodcastFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/podcast.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPodcastSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/podcast.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PodcastEffects",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/podcast.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/podcast.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/podcast.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}